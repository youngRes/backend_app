//=============================================================================
// Ajax.js
//=============================================================================/*:
/* @plugindesc A simple AJAX interface.
* @author Amy Pond @ www.HBGames.org. Created for Afar - the MMORPG
*
* @param URL
* @desc your URL goes in this variable
* @default N/A
*
* @help To use this plugin you need a web server that can run PHP.
* On this server, host a PHP file.
* This file should check for GET variables, clean them (IMPORTANT),
* and return back a message using echo(). The function is called
* by ajaxRequest(parameters) where parameters takes the form:
*
* var1=data&var2=data&var3=data
*
* For example, I may wish to request the result of the equation 2+3.
* In game I call the function: ajaxRequest("action=add&number1=2&number2=3");
*
* Server side, using $_GET and cleaning it to an integer for security,
* I take these variables, add them together, and return the result:
*
* <?php *   //action.php
*   switch($_GET['action'])
*   {
*     case 'add': *       number1 = (int)$_GET['number1'];
*       number2 = (int)$_GET['number2'];
*       result = number1 + number2;
*       echo result;
*       break;
*     case 'login':
*       // code goes here
*       break; *   } * ?>
*
*/

ajaxRequest = function(args) { 

    try {
        var url = $url;
        var retrievedData = ""; 
        var parameters = PluginManager.parameters('Ajax'); 
        var get_params = args; 
        // create a new Ajax request 
        var xhttp = new XMLHttpRequest(); 
        // This function is performed when a message is returned from the Ajax request 
        xhttp.onreadystatechange = function() {   
            if (xhttp.readyState == 4 && xhttp.status == 200) {     
                // set var retrievedData to the returned text    
                retrievedData = xhttp.responseText;    
            }  
        } 

        if(get_params !== ""){
            xhttp.open("GET", url + "?" + get_params, false);
        } else{
            xhttp.open("GET", url, false);
        }
        xhttp.send();
    } catch(error) {
        console.log(url)
        return 
    }
        
  
    return retrievedData;
};

getSavedVariable = function(variableName) { 

    try {

        

        var url = $config.APIURL.urlSavedVariables;

        //var studentCode = "1";

        var gameCode = $config.basic.gameCode;
        var version = $config.basic.version;
        var studentCode = $userName;

        var retrievedJSONData = "";
        var retrievedData = "";

        var basicAuthName = $config.basicAuth.username;
        var basicAuthPass = $config.basicAuth.password;

        // create a new Ajax request 
        var xhttp = new XMLHttpRequest(); 

        xhttp.open("GET", url + "?studentCode=" + studentCode + "&gameCode=" + gameCode + "&version=" + version + "&variableName=" + variableName, false);
        xhttp.withCredentials = true;
        //xhttp.onreadystatechange = handler;
        xhttp.setRequestHeader("Authorization", "Basic " + btoa(basicAuthName + ":" + basicAuthPass));
        xhttp.send();

       //Wait for Response
       if (xhttp.status == 200) {     
        // set var retrievedData to the returned text    
        var retrievedJSONData = JSON.parse(xhttp.responseText);
        retrievedData = retrievedJSONData.value;
        }

    } catch(error) {
        throw new Error (error)
        console.log(url)
        return 
    }
        
    return retrievedData;
};

postSavedVariable = function(variableName, value) {

    try {

        var url = $config.APIURL.urlSavedVariables;

        //var studentCode = "1";

        var gameCode = $config.basic.gameCode;
        var version = $config.basic.version;
        var studentCode = $userName;

        var retrievedJSONData = ""
        var retrievedData = ""

        var basicAuthName = $config.basicAuth.username;
        var basicAuthPass = $config.basicAuth.password;

        // create a new Ajax request 
        var xhttp = new XMLHttpRequest(); 

        // This function is performed when a message is returned from the Ajax request 
        //xhttp.onreadystatechange = function() {   
            //if (xhttp.status == 200) {     
                // set var retrievedData to the returned text    
                //var retrievedJSONData = JSON.parse(xhttp.responseText);   
                //var retrievedData = retrievedJSONData.msg;
            //}  else {
                //console.log(retrievedJSONData);
                //throw new Error (xhttp.responseText)
            //}
        //} 
        
        xhttp.open("POST", url + "?studentCode=" + studentCode + "&gameCode=" + gameCode + "&version=" + version + "&variableName=" + variableName + "&value=" + value, false);
        xhttp.withCredentials = true;
        //xhttp.onreadystatechange = handler;
        xhttp.setRequestHeader("Authorization", "Basic " + btoa(basicAuthName + ":" + basicAuthPass));
        xhttp.send();

    } catch(error) {
        console.log(url)
        return 
    }
        
    return;
};

storeDecision = function(eventCode, key, value) { 

    try {

        var url = $config.APIURL.urlStoreDecision;

        var gameCode = $config.basic.gameCode;
        var version = $config.basic.version;
        var studentCode = $userName;

        var retrievedJSONData = ""
        var retrievedData = ""

        var basicAuthName = $config.basicAuth.username;
        var basicAuthPass = $config.basicAuth.password;
        
        var decision = { "decision": [{"key":key,"value":value}]};

        // create a new Ajax request 
        var xhttp = new XMLHttpRequest(); 

        // This function is performed when a message is returned from the Ajax request 
        //xhttp.onreadystatechange = function() {   
            //if (xhttp.status == 200) {     
                // set var retrievedData to the returned text    
                //var retrievedJSONData = JSON.parse(xhttp.responseText);   
                //var retrievedData = retrievedJSONData.value;
                //throw new Error (xhttp.responseText);
            //}  else {
                //console.log(retrievedData);
                //throw new Error (xhttp.responseText);
            //}
        //} 
        
        xhttp.open("POST", url + "?studentCode=" + studentCode + "&eventCode=" + eventCode, false);
        xhttp.setRequestHeader("Content-Type", "application/json");
        xhttp.withCredentials = true;
        xhttp.setRequestHeader("Authorization", "Basic " + btoa(basicAuthName + ":" + basicAuthPass));

        //Send the proper header information along with the request
        xhttp.send(JSON.stringify(decision));

    } catch(error) {
        console.log(url)
        return 
    }
        
    return retrievedData;
};

getChapterStartScene = function(chapterCode) { 

    try {

        var url = $config.APIURL.urlStartScene;

        var gameCode = $config.basic.gameCode;
        var version = $config.basic.version;

        var retrievedJSONData = ""
        var retrievedData = ""

        var basicAuthName = $config.basicAuth.username;
        var basicAuthPass = $config.basicAuth.password;

        // create a new Ajax request 
        var xhttp = new XMLHttpRequest(); 
        
        xhttp.open("GET", url + "?gameCode=" + gameCode + "&version=" + version + "&chapterCode=" + chapterCode, false, basicAuthName, basicAuthPass);
        xhttp.setRequestHeader("Authorization", "Basic " + btoa(basicAuthName + ":" + basicAuthPass));
        xhttp.send();

        //Wait for Response
        if (xhttp.status == 200) {     
            // set var retrievedData to the returned text    
            var retrievedJSONData = JSON.parse(xhttp.responseText);
            retrievedData = retrievedJSONData.value;
        }

    } catch (error) {
        console.log(url)
    }

    return retrievedData;
};


// open the xhttp connection and send it 
// this function is sync not async, such that the game will wait for the 
// response. Change false to true and the code will run while the game
// does other things, so you don't have to pause for non-important things
// where the player doesn't need a response to continue, such as merely
// updating the online players list.  xhttp.open("GET", parameters['URL'] + "?" + get_params, false);  xhttp.send();
// return the retrieved text  return retrievedData;};