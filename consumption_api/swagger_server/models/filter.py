# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Filter(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, type: str=None, values: List[str]=None):  # noqa: E501
        """Filter - a model defined in Swagger

        :param id: The id of this Filter.  # noqa: E501
        :type id: str
        :param type: The type of this Filter.  # noqa: E501
        :type type: str
        :param values: The values of this Filter.  # noqa: E501
        :type values: List[str]
        """
        self.swagger_types = {
            'id': str,
            'type': str,
            'values': List[str]
        }

        self.attribute_map = {
            'id': 'id',
            'type': 'type',
            'values': 'values'
        }
        self._id = id
        self._type = type
        self._values = values

    @classmethod
    def from_dict(cls, dikt) -> 'Filter':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Filter of this Filter.  # noqa: E501
        :rtype: Filter
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Filter.

        name of the attribute that can be filtered  # noqa: E501

        :return: The id of this Filter.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Filter.

        name of the attribute that can be filtered  # noqa: E501

        :param id: The id of this Filter.
        :type id: str
        """

        self._id = id

    @property
    def type(self) -> str:
        """Gets the type of this Filter.

        numeric or textual  # noqa: E501

        :return: The type of this Filter.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Filter.

        numeric or textual  # noqa: E501

        :param type: The type of this Filter.
        :type type: str
        """

        self._type = type

    @property
    def values(self) -> List[str]:
        """Gets the values of this Filter.

        contains all the possible values of that field if type is textual. If types is numeric contains two elements, the first one is the minimum, the second one is the maximum.  # noqa: E501

        :return: The values of this Filter.
        :rtype: List[str]
        """
        return self._values

    @values.setter
    def values(self, values: List[str]):
        """Sets the values of this Filter.

        contains all the possible values of that field if type is textual. If types is numeric contains two elements, the first one is the minimum, the second one is the maximum.  # noqa: E501

        :param values: The values of this Filter.
        :type values: List[str]
        """

        self._values = values
