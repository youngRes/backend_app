# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Game(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, game_code: str=None, game_version: str=None, game_description: str=None, number_players: int=None, contries: List[str]=None, chapters: List[str]=None):  # noqa: E501
        """Game - a model defined in Swagger

        :param game_code: The game_code of this Game.  # noqa: E501
        :type game_code: str
        :param game_version: The game_version of this Game.  # noqa: E501
        :type game_version: str
        :param game_description: The game_description of this Game.  # noqa: E501
        :type game_description: str
        :param number_players: The number_players of this Game.  # noqa: E501
        :type number_players: int
        :param contries: The contries of this Game.  # noqa: E501
        :type contries: List[str]
        :param chapters: The chapters of this Game.  # noqa: E501
        :type chapters: List[str]
        """
        self.swagger_types = {
            'game_code': str,
            'game_version': str,
            'game_description': str,
            'number_players': int,
            'contries': List[str],
            'chapters': List[str]
        }

        self.attribute_map = {
            'game_code': 'gameCode',
            'game_version': 'gameVersion',
            'game_description': 'gameDescription',
            'number_players': 'numberPlayers',
            'contries': 'contries',
            'chapters': 'chapters'
        }
        self._game_code = game_code
        self._game_version = game_version
        self._game_description = game_description
        self._number_players = number_players
        self._contries = contries
        self._chapters = chapters

    @classmethod
    def from_dict(cls, dikt) -> 'Game':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Game of this Game.  # noqa: E501
        :rtype: Game
        """
        return util.deserialize_model(dikt, cls)

    @property
    def game_code(self) -> str:
        """Gets the game_code of this Game.

        code that identifies a video game. Together  with the version uniquely identifies a video game.  # noqa: E501

        :return: The game_code of this Game.
        :rtype: str
        """
        return self._game_code

    @game_code.setter
    def game_code(self, game_code: str):
        """Sets the game_code of this Game.

        code that identifies a video game. Together  with the version uniquely identifies a video game.  # noqa: E501

        :param game_code: The game_code of this Game.
        :type game_code: str
        """

        self._game_code = game_code

    @property
    def game_version(self) -> str:
        """Gets the game_version of this Game.

        version of an specific video game. Together  with the gameCode uniquely identifies a video game.  # noqa: E501

        :return: The game_version of this Game.
        :rtype: str
        """
        return self._game_version

    @game_version.setter
    def game_version(self, game_version: str):
        """Sets the game_version of this Game.

        version of an specific video game. Together  with the gameCode uniquely identifies a video game.  # noqa: E501

        :param game_version: The game_version of this Game.
        :type game_version: str
        """

        self._game_version = game_version

    @property
    def game_description(self) -> str:
        """Gets the game_description of this Game.

        short description of a game.  # noqa: E501

        :return: The game_description of this Game.
        :rtype: str
        """
        return self._game_description

    @game_description.setter
    def game_description(self, game_description: str):
        """Sets the game_description of this Game.

        short description of a game.  # noqa: E501

        :param game_description: The game_description of this Game.
        :type game_description: str
        """

        self._game_description = game_description

    @property
    def number_players(self) -> int:
        """Gets the number_players of this Game.

        number of players that has played a particular video game.  # noqa: E501

        :return: The number_players of this Game.
        :rtype: int
        """
        return self._number_players

    @number_players.setter
    def number_players(self, number_players: int):
        """Sets the number_players of this Game.

        number of players that has played a particular video game.  # noqa: E501

        :param number_players: The number_players of this Game.
        :type number_players: int
        """

        self._number_players = number_players

    @property
    def contries(self) -> List[str]:
        """Gets the contries of this Game.

        nationality of the players thta have played a particular game.  # noqa: E501

        :return: The contries of this Game.
        :rtype: List[str]
        """
        return self._contries

    @contries.setter
    def contries(self, contries: List[str]):
        """Sets the contries of this Game.

        nationality of the players thta have played a particular game.  # noqa: E501

        :param contries: The contries of this Game.
        :type contries: List[str]
        """

        self._contries = contries

    @property
    def chapters(self) -> List[str]:
        """Gets the chapters of this Game.

        list of chapter's ids that compose a video game.  # noqa: E501

        :return: The chapters of this Game.
        :rtype: List[str]
        """
        return self._chapters

    @chapters.setter
    def chapters(self, chapters: List[str]):
        """Sets the chapters of this Game.

        list of chapter's ids that compose a video game.  # noqa: E501

        :param chapters: The chapters of this Game.
        :type chapters: List[str]
        """

        self._chapters = chapters
