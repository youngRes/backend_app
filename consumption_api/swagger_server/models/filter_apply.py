# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.entry import Entry  # noqa: F401,E501
from swagger_server import util


class FilterApply(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, group: List[Entry]=None, student: List[Entry]=None, test: List[Entry]=None):  # noqa: E501
        """FilterApply - a model defined in Swagger

        :param group: The group of this FilterApply.  # noqa: E501
        :type group: List[Entry]
        :param student: The student of this FilterApply.  # noqa: E501
        :type student: List[Entry]
        :param test: The test of this FilterApply.  # noqa: E501
        :type test: List[Entry]
        """
        self.swagger_types = {
            'group': List[Entry],
            'student': List[Entry],
            'test': List[Entry]
        }

        self.attribute_map = {
            'group': 'group',
            'student': 'student',
            'test': 'test'
        }
        self._group = group
        self._student = student
        self._test = test

    @classmethod
    def from_dict(cls, dikt) -> 'FilterApply':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FilterApply of this FilterApply.  # noqa: E501
        :rtype: FilterApply
        """
        return util.deserialize_model(dikt, cls)

    @property
    def group(self) -> List[Entry]:
        """Gets the group of this FilterApply.


        :return: The group of this FilterApply.
        :rtype: List[Entry]
        """
        return self._group

    @group.setter
    def group(self, group: List[Entry]):
        """Sets the group of this FilterApply.


        :param group: The group of this FilterApply.
        :type group: List[Entry]
        """

        self._group = group

    @property
    def student(self) -> List[Entry]:
        """Gets the student of this FilterApply.


        :return: The student of this FilterApply.
        :rtype: List[Entry]
        """
        return self._student

    @student.setter
    def student(self, student: List[Entry]):
        """Sets the student of this FilterApply.


        :param student: The student of this FilterApply.
        :type student: List[Entry]
        """

        self._student = student

    @property
    def test(self) -> List[Entry]:
        """Gets the test of this FilterApply.


        :return: The test of this FilterApply.
        :rtype: List[Entry]
        """
        return self._test

    @test.setter
    def test(self, test: List[Entry]):
        """Sets the test of this FilterApply.


        :param test: The test of this FilterApply.
        :type test: List[Entry]
        """

        self._test = test
