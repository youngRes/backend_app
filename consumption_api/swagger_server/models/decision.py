# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.entry import Entry  # noqa: F401,E501
from swagger_server import util


class Decision(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, event_code: str=None, event_type: str=None, choices: List[Entry]=None):  # noqa: E501
        """Decision - a model defined in Swagger

        :param event_code: The event_code of this Decision.  # noqa: E501
        :type event_code: str
        :param event_type: The event_type of this Decision.  # noqa: E501
        :type event_type: str
        :param choices: The choices of this Decision.  # noqa: E501
        :type choices: List[Entry]
        """
        self.swagger_types = {
            'event_code': str,
            'event_type': str,
            'choices': List[Entry]
        }

        self.attribute_map = {
            'event_code': 'eventCode',
            'event_type': 'eventType',
            'choices': 'choices'
        }
        self._event_code = event_code
        self._event_type = event_type
        self._choices = choices

    @classmethod
    def from_dict(cls, dikt) -> 'Decision':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Decision of this Decision.  # noqa: E501
        :rtype: Decision
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_code(self) -> str:
        """Gets the event_code of this Decision.

        code that uniquely identifies an event  # noqa: E501

        :return: The event_code of this Decision.
        :rtype: str
        """
        return self._event_code

    @event_code.setter
    def event_code(self, event_code: str):
        """Sets the event_code of this Decision.

        code that uniquely identifies an event  # noqa: E501

        :param event_code: The event_code of this Decision.
        :type event_code: str
        """

        self._event_code = event_code

    @property
    def event_type(self) -> str:
        """Gets the event_type of this Decision.

        type of  the event (multiple choice, timed ...etc)  # noqa: E501

        :return: The event_type of this Decision.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type: str):
        """Sets the event_type of this Decision.

        type of  the event (multiple choice, timed ...etc)  # noqa: E501

        :param event_type: The event_type of this Decision.
        :type event_type: str
        """

        self._event_type = event_type

    @property
    def choices(self) -> List[Entry]:
        """Gets the choices of this Decision.

        dictionary where the choice made by the student is stored. The keys are different attributes in the event and the values are the choices taken by the student. The dictionary changes depending on the type of event.  # noqa: E501

        :return: The choices of this Decision.
        :rtype: List[Entry]
        """
        return self._choices

    @choices.setter
    def choices(self, choices: List[Entry]):
        """Sets the choices of this Decision.

        dictionary where the choice made by the student is stored. The keys are different attributes in the event and the values are the choices taken by the student. The dictionary changes depending on the type of event.  # noqa: E501

        :param choices: The choices of this Decision.
        :type choices: List[Entry]
        """

        self._choices = choices
