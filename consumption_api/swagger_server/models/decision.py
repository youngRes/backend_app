# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Decision(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, event_code: str=None, event_description: str=None, event_type: str=None, choice: str=None):  # noqa: E501
        """Decision - a model defined in Swagger

        :param event_code: The event_code of this Decision.  # noqa: E501
        :type event_code: str
        :param event_description: The event_description of this Decision.  # noqa: E501
        :type event_description: str
        :param event_type: The event_type of this Decision.  # noqa: E501
        :type event_type: str
        :param choice: The choice of this Decision.  # noqa: E501
        :type choice: str
        """
        self.swagger_types = {
            'event_code': str,
            'event_description': str,
            'event_type': str,
            'choice': str
        }

        self.attribute_map = {
            'event_code': 'eventCode',
            'event_description': 'eventDescription',
            'event_type': 'eventType',
            'choice': 'choice'
        }
        self._event_code = event_code
        self._event_description = event_description
        self._event_type = event_type
        self._choice = choice

    @classmethod
    def from_dict(cls, dikt) -> 'Decision':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Decision of this Decision.  # noqa: E501
        :rtype: Decision
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_code(self) -> str:
        """Gets the event_code of this Decision.

        code that uniquely identifies an event  # noqa: E501

        :return: The event_code of this Decision.
        :rtype: str
        """
        return self._event_code

    @event_code.setter
    def event_code(self, event_code: str):
        """Sets the event_code of this Decision.

        code that uniquely identifies an event  # noqa: E501

        :param event_code: The event_code of this Decision.
        :type event_code: str
        """

        self._event_code = event_code

    @property
    def event_description(self) -> str:
        """Gets the event_description of this Decision.

        description of the events where this decession was taken  # noqa: E501

        :return: The event_description of this Decision.
        :rtype: str
        """
        return self._event_description

    @event_description.setter
    def event_description(self, event_description: str):
        """Sets the event_description of this Decision.

        description of the events where this decession was taken  # noqa: E501

        :param event_description: The event_description of this Decision.
        :type event_description: str
        """

        self._event_description = event_description

    @property
    def event_type(self) -> str:
        """Gets the event_type of this Decision.

        type of  the event (multiple choice, timed ...etc)  # noqa: E501

        :return: The event_type of this Decision.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type: str):
        """Sets the event_type of this Decision.

        type of  the event (multiple choice, timed ...etc)  # noqa: E501

        :param event_type: The event_type of this Decision.
        :type event_type: str
        """

        self._event_type = event_type

    @property
    def choice(self) -> str:
        """Gets the choice of this Decision.

        String with the choice a student take in that event, depending on eventType this value can be numeric or a string. However the API always returns an string an latter conversion need to be made on the front-end.  # noqa: E501

        :return: The choice of this Decision.
        :rtype: str
        """
        return self._choice

    @choice.setter
    def choice(self, choice: str):
        """Sets the choice of this Decision.

        String with the choice a student take in that event, depending on eventType this value can be numeric or a string. However the API always returns an string an latter conversion need to be made on the front-end.  # noqa: E501

        :param choice: The choice of this Decision.
        :type choice: str
        """

        self._choice = choice
