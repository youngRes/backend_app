openapi: 3.0.0
info:
  title: YoungRes data comsuption API
  description: API meant to be consumed by the Visualization Application
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
- url: http://localhost:8883/data
  description: docker based server
security:
- basicAuth: []
paths:
  /filters/group:
    get:
      summary: returns information related to the possible filters that can be apply
        to the groups. Each field contains the name, the type (numeric, textual) and
        all the values associated to that field (without repetition).
      operationId: filters_group_get
      responses:
        "200":
          description: Ok, group filters are returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
        "401":
          description: Wrong credentials
        "500":
          description: Internal server error with the error message
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /filters/student:
    get:
      summary: returns information related to the possible filters that can be apply
        to the students. Each field contains the name, the type (numeric, textual)
        and all the values associated to that filter (without repetition).
      operationId: filters_student_get
      responses:
        "200":
          description: Ok, group filters are returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
        "401":
          description: Wrong credentials
        "500":
          description: Internal server error with the error message
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /filters/test:
    get:
      summary: returns information related to the possible filters that can be apply
        to the test. Each field contains the name, the type (numeric, textual) and
        all the values associated to that filter (without repetition).
      operationId: filters_test_get
      responses:
        "200":
          description: Ok, group filters are returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
        "401":
          description: Wrong credentials
        "500":
          description: Internal server error with the error message
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /descriptions/games:
    get:
      summary: returns information about the available games.
      operationId: descriptions_games_get
      parameters:
      - name: limit
        in: query
        description: limits the number of results returned.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 20
      - name: page
        in: query
        description: used for pagination, allows skyping limit entries before starting
          to return results.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 0
      responses:
        "200":
          description: Ok, games information is returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_2'
        "401":
          description: Wrong credentials
        "500":
          description: Internal server error with the error message
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /descriptions/chapter:
    get:
      summary: returns information about the available games.
      operationId: descriptions_chapter_get
      parameters:
      - name: gameCode
        in: query
        description: code that identifies a video game. Together  with the version
          uniquely identifies a video game.
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: Game-1
      - name: gameVersion
        in: query
        description: version of an specific video game. Together  with the gameCode
          uniquely identifies a video game.
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: v.0.1
      - name: chapterCode
        in: query
        description: chapter to retrieve information from
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: chapter_3
      responses:
        "200":
          description: Ok, games information is returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chapter'
        "401":
          description: Wrong credentials
        "500":
          description: Internal server error with the error message
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /descriptions/event:
    get:
      summary: returns information about events inside the video game.
      operationId: descriptions_event_get
      parameters:
      - name: gameCode
        in: query
        description: code that identifies a video game. Together  with the version
          uniquely identifies a video game.
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: Game-1
      - name: gameVersion
        in: query
        description: version of an specific video game. Together  with the gameCode
          uniquely identifies a video game.
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: v.0.1
      - name: chapterCode
        in: query
        description: chapter to retrieve information from
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: chapter_3
      - name: eventCode
        in: query
        description: code of the event to be retreive
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: event3.5
      responses:
        "200":
          description: Ok, test are returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        "401":
          description: Wrong credentials
        "500":
          description: Internal server error with the error message
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /decision:
    get:
      summary: returns decisions taken by students. Has several filter options.
      operationId: decision_get
      parameters:
      - name: gameCode
        in: query
        description: id of the game to be selected
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: Game 3
      - name: gameVersion
        in: query
        description: version of a game to be retrieve
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: v0.1
      - name: chapterCode
        in: query
        description: only decisions taken in events from this chapter are returned.
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: chapter 3
      - name: groupFilter
        in: header
        description: dictionary with the filters to apply to the groups. If empty
          no filter is applied.
        required: false
        style: simple
        explode: false
        schema:
          type: array
          items:
            $ref: '#/components/schemas/EntryList'
      - name: studentFilter
        in: header
        description: dictionary with the filters to apply to the students. If empty
          no filter is applied.
        required: false
        style: simple
        explode: false
        schema:
          type: array
          items:
            $ref: '#/components/schemas/EntryList'
      - name: testFilter
        in: header
        description: dictionary with the filters to apply to the test paased by the
          students. If empty no filter is applied.
        required: false
        style: simple
        explode: false
        schema:
          type: array
          items:
            $ref: '#/components/schemas/EntryList'
      responses:
        "200":
          description: Ok, test are returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_3'
        "401":
          description: Wrong credentials
        "500":
          description: Internal server error with the error message
      x-openapi-router-controller: swagger_server.controllers.default_controller
components:
  schemas:
    Entry:
      properties:
        key:
          type: string
          example: age
        value:
          type: string
          example: "13"
      description: Object used as a entry of a general dictionary
    EntryList:
      properties:
        key:
          type: string
          example: answer1_choices
        values:
          type: array
          example:
          - cat
          - dog
          - fish
          - bird
          items:
            type: string
      description: Object used as a entry of a general dictionary
    Filter:
      properties:
        id:
          type: string
          description: name of the attribute that can be filtered
          example: city
        type:
          type: string
          description: numeric or textual
          example: textual
        values:
          type: array
          example:
          - Madrid
          - Oulu
          items:
            type: string
      description: data type used to retrieve the information related to a filter.
      example:
        values:
        - Madrid
        - Oulu
        id: city
        type: textual
    Group:
      properties:
        group_id:
          type: string
          example: class_3A
        description:
          type: string
          example: students from the class 3A of school...
      description: Object used to store information about a group or class
      example:
        group_id: class_3A
        description: students from the class 3A of school...
    Game:
      properties:
        gameCode:
          type: string
          description: code that identifies a video game. Together  with the version
            uniquely identifies a video game.
          example: Game-1
        gameVersion:
          type: string
          description: version of an specific video game. Together  with the gameCode
            uniquely identifies a video game.
          example: v.0.1
        gameDescription:
          type: string
          description: short description of a game.
          example: Game where LGTBI content is included...
        numberPlayers:
          type: integer
          description: number of players that has played a particular video game.
          example: 30
        contries:
          type: array
          description: nationality of the players thta have played a particular game.
          example:
          - Spain
          - Greece
          - Finland
          items:
            type: string
        chapters:
          type: array
          description: list of chapter's ids that compose a video game.
          example:
          - chapter_1
          - chapter_2
          - chapter_3
          items:
            type: string
      description: data type to store the information related to a video game.
      example:
        contries:
        - Spain
        - Greece
        - Finland
        numberPlayers: 30
        chapters:
        - chapter_1
        - chapter_2
        - chapter_3
        gameVersion: v.0.1
        gameCode: Game-1
        gameDescription: Game where LGTBI content is included...
    Chapter:
      properties:
        chapterCode:
          type: string
          description: code that identifies a chapter inside a video game.
          example: chapter-5
        chapterDescription:
          type: string
          description: short description of a chapter.
          example: Chapter where Paul ...
        highlights:
          type: array
          description: Tips for the teachers to understand what the results obtained
            can means
          example:
          - this chapter study empathy ....
          - low values on ...
          items:
            type: string
        snapshot:
          type: string
          description: url where the picture of the snapshot of the cahpter is stored
          example: www.serverlocations.com/img/snp_3.png
      description: data type to store the information related to a chapter of a video
        game.
      example:
        chapterCode: chapter-5
        highlights:
        - this chapter study empathy ....
        - low values on ...
        chapterDescription: Chapter where Paul ...
        snapshot: www.serverlocations.com/img/snp_3.png
    Event:
      properties:
        eventCode:
          type: string
          description: code that uniquely identifies an event
          example: event-1-2-3
        eventDescription:
          type: string
          description: short description of the event.
          example: event that occurs after ...
        highlights:
          type: array
          description: Tips for the teachers to understand what the results obtained
            can means
          example:
          - Select fish means ....
          - low values on ...
          items:
            type: string
        eventType:
          type: string
          description: type of  the event (multiple choice, timed ...etc)
          example: choice
        parentDecision:
          $ref: '#/components/schemas/Decision'
        possibleChoices:
          type: array
          description: dictionaries where the keys are attributes in the event and
            the values are all the possible choices. This dictionary changes depending
            on the type of event.
          example:
          - key: favority-animal
            values:
            - cat
            - dog
            - bird
            - fish
          items:
            $ref: '#/components/schemas/EntryList'
      description: data type used to store an specific event inside a game
      example:
        eventCode: event-1-2-3
        parentDecision:
          eventCode: event-1-2-3
          eventDescription: in this event the student is asked for its favorite pet...
          eventType: choice
          choice: cat
        highlights:
        - Select fish means ....
        - low values on ...
        eventDescription: event that occurs after ...
        possibleChoices:
        - key: favority-animal
          values:
          - cat
          - dog
          - bird
          - fish
        eventType: choice
    Decision:
      properties:
        eventCode:
          type: string
          description: code that uniquely identifies an event
          example: event-1-2-3
        eventDescription:
          type: string
          description: description of the events where this decession was taken
          example: in this event the student is asked for its favorite pet...
        eventType:
          type: string
          description: type of  the event (multiple choice, timed ...etc)
          example: choice
        choice:
          type: string
          description: String with the choice a student take in that event, depending
            on eventType this value can be numeric or a string. However the API always
            returns an string an latter conversion need to be made on the front-end.
          example: cat
      description: data type to store the decision taken during an event
      example:
        eventCode: event-1-2-3
        eventDescription: in this event the student is asked for its favorite pet...
        eventType: choice
        choice: cat
    inline_response_200:
      properties:
        filters:
          type: array
          items:
            $ref: '#/components/schemas/Filter'
        group_ids:
          type: array
          items:
            $ref: '#/components/schemas/Group'
      example:
        group_ids:
        - group_id: class_3A
          description: students from the class 3A of school...
        - group_id: class_3A
          description: students from the class 3A of school...
        filters:
        - values:
          - Madrid
          - Oulu
          id: city
          type: textual
        - values:
          - Madrid
          - Oulu
          id: city
          type: textual
    inline_response_200_1:
      properties:
        filters:
          type: array
          items:
            $ref: '#/components/schemas/Filter'
      example:
        filters:
        - values:
          - Madrid
          - Oulu
          id: city
          type: textual
        - values:
          - Madrid
          - Oulu
          id: city
          type: textual
    inline_response_200_2:
      properties:
        games:
          type: array
          items:
            $ref: '#/components/schemas/Game'
      example:
        games:
        - contries:
          - Spain
          - Greece
          - Finland
          numberPlayers: 30
          chapters:
          - chapter_1
          - chapter_2
          - chapter_3
          gameVersion: v.0.1
          gameCode: Game-1
          gameDescription: Game where LGTBI content is included...
        - contries:
          - Spain
          - Greece
          - Finland
          numberPlayers: 30
          chapters:
          - chapter_1
          - chapter_2
          - chapter_3
          gameVersion: v.0.1
          gameCode: Game-1
          gameDescription: Game where LGTBI content is included...
    inline_response_200_3:
      properties:
        decisions:
          type: array
          items:
            $ref: '#/components/schemas/Decision'
      example:
        decisions:
        - eventCode: event-1-2-3
          eventDescription: in this event the student is asked for its favorite pet...
          eventType: choice
          choice: cat
        - eventCode: event-1-2-3
          eventDescription: in this event the student is asked for its favorite pet...
          eventType: choice
          choice: cat
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
      x-basicInfoFunc: swagger_server.controllers.authorization_controller.check_basicAuth
